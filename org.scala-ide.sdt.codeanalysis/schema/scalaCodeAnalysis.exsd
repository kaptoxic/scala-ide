<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.scala-ide.sdt.codeanalysis" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appinfo>
         <meta.schema plugin="org.scala-ide.sdt.codeanalysis" id="scalaCodeAnalysis" name="Scala Code Analysis"/>
      </appinfo>
      <documentation>
         This extension point can be used to extend the scala compilation phase with static code analysis extensions.
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
         <sequence minOccurs="1" maxOccurs="unbounded">
            <element ref="analyzer"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>

               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>

               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>

               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="analyzer">
      <complexType>
         <choice minOccurs="0" maxOccurs="1">
            <element ref="marker"/>
         </choice>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  The name of this analyzer used to display in the UI.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>

               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>

               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":scala.tools.eclipse.codeanalysis.CodeAnalysisExtension"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="msgPattern" type="string" use="required">
            <annotation>
               <documentation>
                  The message this analzyer will emit. This is needed to parse the generated messages in the IDE to e.g. adjust the severity. The string may contain placeholders (%s).
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="marker">
      <annotation>
         <documentation>
            An analyzer may contribute its own marker, which should be derived from the org.scala-ide.sdt.core.scalaCodeAnalysisProblem marker.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>

               </documentation>
            </annotation>
         </attribute>
         <attribute name="severity" type="string" use="default" value="1">
            <annotation>
               <documentation>
                  Severity is either 1, 2 or 3, corresponding to the SEVERITY_* constants in IMarker.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appinfo>
         <meta.section type="since"/>
      </appinfo>
      <documentation>
         2.0.0
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="examples"/>
      </appinfo>
      <documentation>
         For an example, see the UnusedImports analyzer that is part of the Scala IDE.
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="apiinfo"/>
      </appinfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="implementation"/>
      </appinfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>


</schema>
